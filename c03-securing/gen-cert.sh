# Creating a certificate for the Mosquitto server
# Now that we have a private certificate authority,
# we can create the certificate for the Mosquitto server,
# that is, a certificate for the computer that will run the MQTT server.
# First, we must generate a new private key that will be different
# from the private key we generated for our own private certificate authority.
# Go to the Terminal in macOS or Linux,
# or the Command Prompt in Windows.
# Run the following command to create a 2,048-bit key and save it in the server.key file:
cd mqtt_certificates
openssl genrsa -out server.key 2048

#The following lines show sample output generated by the previous command:
# Generating RSA private key,
# 2048 bit long modulus

#The previous command will generate the private key in the server.key file.
# Go back to the Terminal in macOS or Linux,
# or the Command Prompt in Windows.
# Run the following command to generate a certificate signing request.
# The next command uses the previously created 2, 048-bit private key saved
# in the server.key file and generates a server.csr file:
openssl req -new -key server.key -out server.csr

#After you enter the previous command,
# OpenSSL asks for information that will be incorporated in the certificate.
# You have to enter the information and press Enter.
# If you don't want to enter specific information,
# just enter a dot (.) and press Enter.
# In this case,
# the most important value is Common Name.
# Enter the IPv4 or IPv6 address for the computer that is running the
# Mosquitto server in this field instead of the 192.168.1.1 value shown in the next lines.
# The following lines show the sample output and questions with sample answers.
# Do not forget to enter the appropriate value for Common Name:
# You are about to be asked to enter information that will be incorporated
# into your certificate request.
# What you are about to enter is what is called a Distinguished Name or a DN.
# There are quite a few fields but you can leave some blank
# For some fields there will be a default value,
# If you enter '.',  the field will be left blank.
# -----
# Country Name (2 letter code) [AU]:US
# State or Province Name (full name) [Some-State]:FLORIDA
# Locality Name (eg, city) []:ORLANDO
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MQTT 3.1.1 SERVER
# Organizational Unit Name (eg, section) []:MQTT
# Common Name (e. g.  server FQDN or YOUR name) []:192.168.1.1
# Email Address []:mosquittoserver@example.com
#
# Please enter the following 'extra' attributes to be sent with your certificate request
# A challenge password []:
# An optional company name []:Mosquitto MQTT Server
# Go to the Terminal in macOS or Linux,
# or the Command Prompt in Windows.
# Run the following command to sign the previously created certificate signing request,
# that is, the server.csr file.
# The next command also uses the self-signed
# X.509 digital certificate for the certificate authority and its private key that we generated before:
# the ca.crt and ca.key files.
#
# The command generates a server.crt file with the signed X.509 digital certificate for the Mosquitto server.
# The command makes the signed certificate valid for 3,650 days.
# The value is specified after the -days option:

openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 3650 -sha256

#As happened when we created the self-signed X.509 digital certificate for the certificate authority,
# we also specify the -sha256 option to use SHA-256 hash functions for the Mosquitto server certificate.
# You can use -sha512 instead option of -sha256 if you want to use SHA-512 hash functions for increased security.
#
# The following lines show sample output generated by the previous command.
# The values shown after subject will be different in your configuration because
# you entered your own values when you generated the certificate signing request that was saved in the server.csr
#
# file:
# Signature ok
# subject=C = US,
# ST = FLORIDA,
# L = ORLANDO,
# O = MQTT 3.1.1 SERVER,
# OU = MQTT,
# CN = 192.168.1.1,
# emailAddress = mosquittoserver@example.com

#Getting CA Private Key
# Run the following command to display data and details for the generated server certificate file:

openssl x509 -in server.crt -noout -text

#The following lines show sample output that displays details about the signature algorithm,
# the issuer,
# the validity,
# the subject,
# and the signature algorithms:

#Certificate:
# Data:
# Version: 1 (0x0)
# Serial Number: a1:fa:a7:26:53:da:24:0b
# Signature Algorithm: sha256WithRSAEncryption
# Issuer: C = US,
# ST = NEW YORK,
# L = NEW YORK,
# O = MOSQUITTO CERTIFICATE AUTHORITY,
# CN = MOSQUITTO CERTIFICATE AUTHORITY,
# emailAddress = mosquittoca@example.com
# Validity
# Not Before: Mar 22 18:20:01 2018 GMT
# Not After : Mar 19 18:20:01 2028 GMT
# Subject: C = US,
# ST = FLORIDA,
# L = ORLANDO,
# O = MQTT 3.1.1 SERVER,
# OU = MQTT,
# CN = 192.168.1.1,
# emailAddress = mosquittoserver@example.com
# Subject Public Key Info:
# Public Key Algorithm: rsaEncryption
# Public-Key: (2048 bit)
# Modulus: 00:f5:8b:3e:76:0a:ab:65:d2:ee:3e:47:6e:dc:be:
#
# After running the previous commands, we will have the following three files in the mqtt_certificates directory:
# server.key: Server key
# server.csr: Server certificate signing request
# server.crt: Server certificate file
# The server certificate file is in PEM format,
# as is the certificate authority certificate file.
